//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PetTags = newPetTagsTable("public", "pet_tags", "")

type petTagsTable struct {
	postgres.Table

	// Columns
	PetID postgres.ColumnInteger
	TagID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PetTagsTable struct {
	petTagsTable

	EXCLUDED petTagsTable
}

// AS creates new PetTagsTable with assigned alias
func (a PetTagsTable) AS(alias string) *PetTagsTable {
	return newPetTagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PetTagsTable with assigned schema name
func (a PetTagsTable) FromSchema(schemaName string) *PetTagsTable {
	return newPetTagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PetTagsTable with assigned table prefix
func (a PetTagsTable) WithPrefix(prefix string) *PetTagsTable {
	return newPetTagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PetTagsTable with assigned table suffix
func (a PetTagsTable) WithSuffix(suffix string) *PetTagsTable {
	return newPetTagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPetTagsTable(schemaName, tableName, alias string) *PetTagsTable {
	return &PetTagsTable{
		petTagsTable: newPetTagsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newPetTagsTableImpl("", "excluded", ""),
	}
}

func newPetTagsTableImpl(schemaName, tableName, alias string) petTagsTable {
	var (
		PetIDColumn    = postgres.IntegerColumn("pet_id")
		TagIDColumn    = postgres.IntegerColumn("tag_id")
		allColumns     = postgres.ColumnList{PetIDColumn, TagIDColumn}
		mutableColumns = postgres.ColumnList{PetIDColumn, TagIDColumn}
	)

	return petTagsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PetID: PetIDColumn,
		TagID: TagIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
